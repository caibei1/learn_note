1.索引高度一般多少？能存多少数据
    MySql默认一个节点的长度为16K，一个整数（bigint）字段索引的长度为 8B,另外每个索引还跟着6B的指向其子树的指针；所以16K/14B ≈ 1170
    以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。
    考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。
    其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。

2.关于 InnoDB 的表结构
 在 InnoDB 中，每一张表其实就是多个 B+ 树，即一个主键索引树和多个非主键索引树。
 如果不使用索引进行查询，则从主索引 B+ 树的叶子节点进行遍历。

3.索引维护，什么情况下会页分裂，页合并。
B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。
以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。
而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。
在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。当然有分裂就有合并。
当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。

4.用自增id做主键的好处
1.不会触发页分裂合并，不会挪动数据
2.长度小，节点可以包含更多数据，减小树高度「不确定」，非主键索引叶子节点存储的数据量也更少

5.什么是覆盖索引,索引下推，最左前缀原则
select * from tuser where name like '张%' and age=10  联合索引（name, age） 怎么查询（版本号大于5.6和小于5.6的区别）

6.自增主键是否是连续的额，为什么


https://developer.jdcloud.com/article/3947